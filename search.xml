<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>多线程相关概念梳理</title>
      <link href="/2019/10/16/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5%E6%A2%B3%E7%90%86/"/>
      <url>/2019/10/16/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5%E6%A2%B3%E7%90%86/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="什么是线程、进程"><a href="#什么是线程、进程" class="headerlink" title="什么是线程、进程"></a>什么是线程、进程</h1><h2 id="操作系统、进程、线程的包含关系"><a href="#操作系统、进程、线程的包含关系" class="headerlink" title="操作系统、进程、线程的包含关系"></a>操作系统、进程、线程的包含关系</h2><p>操作系统是包含多个进程的容器，而每个进程又都是容纳多个线程的容器 </p><p><img alt="包含关系" data-src="https://angela-di.oss-cn-shenzhen.aliyuncs.com/jincheng.png" class="lozad"></p><h2 id="Oracle文档的官方定义"><a href="#Oracle文档的官方定义" class="headerlink" title="Oracle文档的官方定义"></a>Oracle文档的官方定义</h2><ul><li><p>进程： 使用fork（2）系统调用创建的UNIX环境（例如文件描述符，用户ID等），它被设置为运行程序。</p></li><li><p>线程：在进程上下文中执行的一系列指令。</p></li></ul><h2 id="什么是进程"><a href="#什么是进程" class="headerlink" title="什么是进程"></a>什么是进程</h2><ul><li>英文是Process，指的是程序的一次执行，在用户下达运行程序的命令后，就会产生进程。</li></ul><ul><li>总结：进程是程序（这里可以理解为我们写的代码）的真正运行实例，是资源分配的基本单位。</li></ul><h2 id="什么是线程"><a href="#什么是线程" class="headerlink" title="什么是线程"></a>什么是线程</h2><ul><li><p>靠谱定义是“线程是CPU的基本调度单位，每个线程执行的都是进程代码的某个片段”</p></li><li><p>实例演示<br>用活动监视器的CPU栏目看java进程的线程数的变化<br>创建100个线程，用活动监视器的CPU栏目看java进程的线程数的变化，可以看到一个java进程的线程数有120+，10秒后消失了。</p></li><li><p>用房子作比喻</p><p>房子是一个容器，拥有某些属性（例如建筑面积，卧室数量等），但是房子本身并没有主动做任何事情。</p><p>做事情的是住在里面的人（比喻线程）。人在房子里工作、睡觉、看电视，这些比喻线程在执行各种功能的代码。</p><p>进程是线程的容器，包含存储器等资源，而线程利用这些资源来执行代码，最终产生结果。</p></li></ul><h2 id="进程和线程的关系和区别"><a href="#进程和线程的关系和区别" class="headerlink" title="进程和线程的关系和区别"></a>进程和线程的关系和区别</h2><h3 id="关系"><a href="#关系" class="headerlink" title="关系"></a>关系</h3><p> 一张图说清问题</p><p> <img alt data-src="https://angela-di.oss-cn-shenzhen.aliyuncs.com/10.png" class="lozad"></p><h3 id="起源不同"><a href="#起源不同" class="headerlink" title="起源不同"></a>起源不同</h3><p>先有进程，后有线程。</p><h3 id="概念不同"><a href="#概念不同" class="headerlink" title="概念不同"></a>概念不同</h3><p>进程是具有一定独立功能的程序关于某个数据集合上的一次运行活动,进程是系统进行资源分配和调度的一个独立单位；线程是CPU调度单位</p><h3 id="内存共享方式不同"><a href="#内存共享方式不同" class="headerlink" title="内存共享方式不同"></a>内存共享方式不同</h3><p> 默认情况下，内存无法与其他进程共享<br>线程共享由操作系统分配给其父进程的相同内存块</p><h3 id="拥有资源不同"><a href="#拥有资源不同" class="headerlink" title="拥有资源不同"></a>拥有资源不同</h3><ul><li><p>进程拥有独立内存，而线程自己基本上不拥有系统资源,只拥有一点在运行中必不可少的资源(如程序计数器,一组寄存器和栈),但是它可与同属一个进程的其他的线程共享进程所拥有的全部资源。</p></li><li><p>线程共享的内容</p><ol><li>进程代码段</li><li>进程的公有数据(利用这些共享的数据，线程很容易的实现相互之间的通讯)</li><li>进程打开的文件描述符</li><li>信号的处理器</li><li>进程的当前目录</li><li>进程用户ID与进程组ID</li></ol></li></ul><ul><li><p>线程独有的内容</p><ol><li>线程ID</li><li>寄存器组的值</li><li>线程的堆栈</li><li>错误返回码</li><li>线程的信号屏蔽码</li></ol></li></ul><h3 id="数量不同"><a href="#数量不同" class="headerlink" title="数量不同"></a>数量不同</h3><p> 一个程序至少有一个进程,一个进程至少有一个线程</p><h3 id="开销不同"><a href="#开销不同" class="headerlink" title="开销不同"></a>开销不同</h3><ul><li><p>线程的创建、终止时间比进程短</p></li><li><p>同一进程内的线程切换时间比进程切换短</p></li><li><p>同一进程的各个线程间共享内存和文件资源，可以不通过内核进行通信</p></li></ul><h3 id="相同点"><a href="#相同点" class="headerlink" title="相同点"></a>相同点</h3><p> 就绪、等待、运行等状态</p><h2 id="Java和多线程的关系（代码演示）"><a href="#Java和多线程的关系（代码演示）" class="headerlink" title="Java和多线程的关系（代码演示）"></a>Java和多线程的关系（代码演示）</h2><ul><li><p>Java天生支持多线程、语言排名高</p></li><li><p>Java线程会一对一映射到操作系统</p><p><img alt data-src="https://angela-di.oss-cn-shenzhen.aliyuncs.com/11.png" class="lozad"></p></li><li><p>JVM自动启动线程</p><ul><li>debugger<br><img alt data-src="https://angela-di.oss-cn-shenzhen.aliyuncs.com/debugger.png" class="lozad"></li></ul><ul><li><p>线程信息</p><ul><li><p>Signal Dispatcher 　 // 负责把操作系统发来的信号分发给适当的处理程序 </p></li><li><p>Finalizer 　 　 　 　// 负责对象的finalize()方法 </p></li><li><p>Reference Handler    // 和GC、引用相关的线程</p></li><li><p>main 　 　 　 　 　  // 主线程，用户程序的入口</p></li></ul></li></ul></li></ul><h1 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h1><h2 id="什么是多线程"><a href="#什么是多线程" class="headerlink" title="什么是多线程"></a>什么是多线程</h2><ul><li><p>多线程是指在单个进程中运行多个线程。如果一个程序允许允许两个或以上的线程，那么它就是多线程程序。</p></li><li><p>比喻</p><ul><li><p>房间的比喻<br> 1.客厅——公共空间<br> 2.厕所——锁<br> 3.独立空间——线程共享空间<br> 4.花园浇花——线程合作</p></li><li><p>火锅的比喻<br> 1.大火锅一个人吃，就是单进程单线程<br> 2.大火锅多人吃，就是单进程多线程<br> 3.分开吃小火锅，就是多进程多线程<br> 4.我吃火锅，别人吃火锅底料，那就是我拥有锁，别人拿不到锁</p></li></ul></li></ul><ul><li>举例</li></ul><p>抢火车票<br><img alt data-src="https://angela-di.oss-cn-shenzhen.aliyuncs.com/huochepiao.png" class="lozad"></p><ul><li><p>独立任务和共享任务的图示</p><p><img alt="独立任务" data-src="https://angela-di.oss-cn-shenzhen.aliyuncs.com/dulirenwu.png" class="lozad"></p><p><img alt="共享任务" data-src="https://angela-di.oss-cn-shenzhen.aliyuncs.com/gongxiangrenwu.png" class="lozad"></p></li></ul><h2 id="为什么要用多线程"><a href="#为什么要用多线程" class="headerlink" title="为什么要用多线程"></a>为什么要用多线程</h2><h3 id="最主要的目的就是提高CPU利用率"><a href="#最主要的目的就是提高CPU利用率" class="headerlink" title="最主要的目的就是提高CPU利用率"></a>最主要的目的就是提高CPU利用率</h3><ul><li><p>提高处理速度</p></li><li><p>避免无效等待（IO的时候可以做别的事）</p></li><li><p>提高用户体验：避免卡顿、缩短等待时间</p><ol><li><p>并行处理，提高性能，通常是服务器领域（例如Tomcat），用多个线程去接收进来的HTTP请求，而不是排队等待单一的线程处理</p></li><li><p>在Android开发中，主线程的重要任务之一是绘制屏幕界面，该线程中不允许进行IO操作或网络请求，目的就是避免卡顿，影响用户的交互</p></li></ol></li></ul><h3 id="便于编程建模"><a href="#便于编程建模" class="headerlink" title="便于编程建模"></a>便于编程建模</h3><p>把这个大的任务A分解成几个小任务，任务B、任务C、任务D，分别建立程序模型，并通过多线程分别运行这几个任务，那就简单很多了。</p><h3 id="计算机性能定律：摩尔定律失效，阿姆达尔定律登上舞台"><a href="#计算机性能定律：摩尔定律失效，阿姆达尔定律登上舞台" class="headerlink" title="计算机性能定律：摩尔定律失效，阿姆达尔定律登上舞台"></a>计算机性能定律：摩尔定律失效，阿姆达尔定律登上舞台</h3><ul><li><p>摩尔定律</p><p>当价格不变时，集成电路上可容纳的元器件的数目，约每隔18-24个月便会增加一倍，性能也将提升一倍。</p></li><li><p>阿姆达尔定律</p><p><img alt data-src="https://angela-di.oss-cn-shenzhen.aliyuncs.com/Amdahl_Law.jpg" class="lozad"></p></li></ul><p>结论: 一般情况下，处理器越多，程序执行的速度就会越快，但是会有一个上限，上限取决于程序中串行部分的比例，并行的比例越高，多处理器的效果越明显。</p><h2 id="什么场景中会用到多线程"><a href="#什么场景中会用到多线程" class="headerlink" title="什么场景中会用到多线程?"></a>什么场景中会用到多线程?</h2><h3 id="什么时候需要新开线程"><a href="#什么时候需要新开线程" class="headerlink" title="什么时候需要新开线程"></a>什么时候需要新开线程</h3><p>通常在需要进行耗时任务的时候，例如执行磁盘IO读写，或者从网络获取信息的时候。</p><h3 id="为了同时做多件不同的事"><a href="#为了同时做多件不同的事" class="headerlink" title="为了同时做多件不同的事"></a>为了同时做多件不同的事</h3><ul><li><p>开网页同时听音乐</p></li><li><p>后台线程——比如执行定时任务quartz</p></li></ul><h3 id="为了提高工作效率、处理能力"><a href="#为了提高工作效率、处理能力" class="headerlink" title="为了提高工作效率、处理能力"></a>为了提高工作效率、处理能力</h3><ul><li><p>tomcat——每次有一个新的请求过来的时候，tomcat会把这个请求交给一个新的线程去处理，。</p></li><li><p>多线程后台并行下载文件</p></li><li><p>NIO和AIO</p></li></ul><h3 id="需要同时有很大并发量的时候"><a href="#需要同时有很大并发量的时候" class="headerlink" title="需要同时有很大并发量的时候"></a>需要同时有很大并发量的时候</h3><p>压测</p><h3 id="多线程的局限"><a href="#多线程的局限" class="headerlink" title="多线程的局限"></a>多线程的局限</h3><ul><li><p>上下文切换带来的消耗</p></li><li><p>异构化任务（任务结构不一样）很难高效并行</p></li><li><p>带来线程安全问题</p><p>1.a++数据错误</p><p>2.死锁等活跃性问题</p><p>3.初始化的时候</p></li></ul><h1 id="串行、并行、并发"><a href="#串行、并行、并发" class="headerlink" title="串行、并行、并发"></a>串行、并行、并发</h1><h2 id="串行和并行"><a href="#串行和并行" class="headerlink" title="串行和并行"></a>串行和并行</h2><p>串行是大家排队一个个来，不轮换，并行是大家一起来<br><img alt data-src="https://angela-di.oss-cn-shenzhen.aliyuncs.com/myblog%20pic/%E4%B8%B2%E8%A1%8C.png" class="lozad"></p><h2 id="并发和并行"><a href="#并发和并行" class="headerlink" title="并发和并行"></a>并发和并行</h2><h3 id="一图胜千言"><a href="#一图胜千言" class="headerlink" title="一图胜千言"></a>一图胜千言</h3><p><img alt data-src="https://angela-di.oss-cn-shenzhen.aliyuncs.com/myblog%20pic/concurrent.png" class="lozad"></p><h3 id="并行的概念"><a href="#并行的概念" class="headerlink" title="并行的概念"></a>并行的概念</h3><p>在同一时刻，有多个任务同时执行</p><h3 id="当并发指的是第一种概念（多个任务的执行状态）的时候"><a href="#当并发指的是第一种概念（多个任务的执行状态）的时候" class="headerlink" title="当并发指的是第一种概念（多个任务的执行状态）的时候"></a>当并发指的是第一种概念（多个任务的执行状态）的时候</h3><p><img alt data-src="https://angela-di.oss-cn-shenzhen.aliyuncs.com/myblog%20pic/bingfa.png" class="lozad"><br><img alt data-src="https://angela-di.oss-cn-shenzhen.aliyuncs.com/myblog%20pic/bingxing.png" class="lozad"><br><img alt data-src="https://angela-di.oss-cn-shenzhen.aliyuncs.com/myblog%20pic/baohan.png" class="lozad"></p><h3 id="当并发指的是第二种概念（程序的不同部分具有可以同时执行的性质）的时候"><a href="#当并发指的是第二种概念（程序的不同部分具有可以同时执行的性质）的时候" class="headerlink" title="当并发指的是第二种概念（程序的不同部分具有可以同时执行的性质）的时候"></a>当并发指的是第二种概念（程序的不同部分具有可以同时执行的性质）的时候</h3><p> “并发性”是一种程序的性质。如果一个程序具有并发性，说明这个程序的不同的部分可以无序或同时执行，且不影响最终的执行结果。</p><h3 id="串行和并发的实际例子"><a href="#串行和并发的实际例子" class="headerlink" title="串行和并发的实际例子"></a>串行和并发的实际例子</h3><ul><li><p>例子——打游戏时，女朋友来电话了</p><ul><li><p>同时打游戏和接电话，大脑单核CPU，需要快速切换，游戏很容易输，女朋友还生气了，得不到预期结果</p></li><li><p>关掉游戏，专心接电话（串行）</p></li></ul></li></ul><ul><li><p>结论</p><ul><li>程序具备并发性，但不并行执行——单核并行程序</li></ul></li></ul><ul><li>程序具备并发性，且并行执行——多核</li></ul><ul><li><p>既不并行执行，也不具备并发性——单核串行</p></li><li><p>并行执行，但程序不具备并发性——不可能</p></li></ul><h2 id="是什么让并发和并行成为可能"><a href="#是什么让并发和并行成为可能" class="headerlink" title="是什么让并发和并行成为可能"></a>是什么让并发和并行成为可能</h2><ul><li><p>操作系统的升级</p></li><li><p>CPU的升级，单核变多核</p></li><li><p>编程语言的升级</p></li></ul><h1 id="高并发"><a href="#高并发" class="headerlink" title="高并发"></a>高并发</h1><h2 id="什么是高并发"><a href="#什么是高并发" class="headerlink" title="什么是高并发"></a>什么是高并发</h2><p>双11， 春晚</p><h2 id="高并发和多线程的联系和不同？"><a href="#高并发和多线程的联系和不同？" class="headerlink" title="高并发和多线程的联系和不同？"></a>高并发和多线程的联系和不同？</h2><h3 id="多线程和高并发是什么"><a href="#多线程和高并发是什么" class="headerlink" title="多线程和高并发是什么"></a>多线程和高并发是什么</h3><p>高并发是一种状态，多线程是高并发的一种重要的解决方案</p><h3 id="高并发并不意味着是多线程"><a href="#高并发并不意味着是多线程" class="headerlink" title="高并发并不意味着是多线程"></a>高并发并不意味着是多线程</h3><p>比如Redis，Redis是单线程的，但支持高并发</p><h2 id="高并发有哪些指标"><a href="#高并发有哪些指标" class="headerlink" title="高并发有哪些指标"></a>高并发有哪些指标</h2><p>1.QPS——每秒请求数</p><p>2.带宽——峰值流量和页面的平均大小</p><p>3.PV——页面浏览量</p><p>4.UV——独立访问(区别IP)</p><ul><li>IP&gt;UV 例如以前的拨号上网，断线重连，重新分配IP，但还是你这个人访问</li><li>IP&lt;UV 同一个局域网对外一个IP，但有多人访问</li></ul><p>5.吞吐率（Requests per second）</p><p>6.并发连接数（The number of concurrent connections）</p><p>7.服务器平均请求等待时间（Time per request: across all concurrent requests）</p><h1 id="同步与异步、阻塞与非阻塞"><a href="#同步与异步、阻塞与非阻塞" class="headerlink" title="同步与异步、阻塞与非阻塞"></a>同步与异步、阻塞与非阻塞</h1><h2 id="同步"><a href="#同步" class="headerlink" title="同步"></a>同步</h2><ul><li><p>同步指的是，客户端发出一个请求后，在没有得到结果之前，服务端就不返回任何结果。但是一旦服务端返回，那返回的就是客户端想要的结果（而不是告诉客户端再等等之类的内容）。</p></li><li><p>被调用者主动告诉调用者结果</p></li><li><p>被调用者（也就是服务器）的行为，而不是请求方的行为。</p></li></ul><h2 id="异步"><a href="#异步" class="headerlink" title="异步"></a>异步</h2><ul><li><p>不实时处理</p></li><li><p>调用在发出之后，服务端会立刻返回，告诉调用方“我收到你的请求了，我会处理的”</p></li><li><p>调用发出后，等服务端计算完毕后，服务端会通过发消息等途径来通知调用者，或通过回调函数处理这个调用。</p></li></ul><h2 id="故事"><a href="#故事" class="headerlink" title="故事"></a>故事</h2><h3 id="烧水壶"><a href="#烧水壶" class="headerlink" title="烧水壶"></a>烧水壶</h3><ul><li><p>盯着水壶</p></li><li><p>声音提醒</p></li></ul><h3 id="打电话问书店老板"><a href="#打电话问书店老板" class="headerlink" title="打电话问书店老板"></a>打电话问书店老板</h3><ul><li><p>现场查询</p></li><li><p>后续回电</p></li></ul><h2 id="阻塞和非阻塞"><a href="#阻塞和非阻塞" class="headerlink" title="阻塞和非阻塞"></a>阻塞和非阻塞</h2><ul><li><p>站在调用者的角度，我调用一个东西的后，结果返回前，是否还能做别的事</p></li><li><p>站在线程状态的角度，为线程6种状态的其中一种</p></li></ul><h2 id="同步异步、阻塞非阻塞的综合例子"><a href="#同步异步、阻塞非阻塞的综合例子" class="headerlink" title="同步异步、阻塞非阻塞的综合例子"></a>同步异步、阻塞非阻塞的综合例子</h2><ul><li>同步阻塞（BIO）</li></ul><p>坐在普通水壶前，等着水烧开</p><ul><li><p>同步非阻塞（NIO）</p><p>水烧开之前我们先去客厅看电视了，但是水壶不会主动通知我们，需要我们时不时的去厨房看一下水有没有烧开</p></li><li><p>异步阻塞（很少用，挺傻逼的）</p><p>带有提醒功能的水壶烧水，我们坐着等</p></li><li><p>异步非阻塞（AIO）</p></li></ul><p>带有提醒功能的水壶烧水。在水烧发出提醒之前我们先去客厅看电视了，等水壶发出声音提醒我们。</p><h1 id="面试高频问题"><a href="#面试高频问题" class="headerlink" title="面试高频问题"></a>面试高频问题</h1><ol><li><p>进程和线程的相同和不同？</p></li><li><p>并行和并发的异同？</p></li><li><p>高并发是不是就意味着多线程？有什么反例？</p></li><li><p>多线程可以提高程序执行效率，你知不知道有有哪些弊端？</p></li><li><p>什么是同步，什么是异步，什么是阻塞，什么是非阻塞？</p></li><li><p>在单核CPU上运行多线程程序有意义吗？ </p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 多线程 </category>
          
          <category> 高并发 </category>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -多线程 -高并发 -面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx+Fastdfs搭建高性能分布式文件服务器</title>
      <link href="/2019/10/09/Nginx+Fastdfs%E6%90%AD%E5%BB%BA%E9%AB%98%E6%80%A7%E8%83%BD%E5%88%86%E5%B8%83%E5%BC%8F%E6%96%87%E4%BB%B6%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
      <url>/2019/10/09/Nginx+Fastdfs%E6%90%AD%E5%BB%BA%E9%AB%98%E6%80%A7%E8%83%BD%E5%88%86%E5%B8%83%E5%BC%8F%E6%96%87%E4%BB%B6%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h2><p><img alt="流程图" data-src="https://angela-di.oss-cn-shenzhen.aliyuncs.com/%E5%B0%8F%E4%B9%A6%E5%8C%A0/upload.png" class="lozad"></p><h3 id="组件介绍"><a href="#组件介绍" class="headerlink" title="组件介绍"></a>组件介绍</h3><h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><ul><li><a href="https://angela-di.oss-cn-shenzhen.aliyuncs.com/soft/Xshell-6.0.0101p.exe" target="_blank" rel="noopener">Xshell</a></li><li><a href="https://angela-di.oss-cn-shenzhen.aliyuncs.com/soft/Xftp-6.0.0095p.exe" target="_blank" rel="noopener">Xftp</a></li><li><a href="https://angela-di.oss-cn-shenzhen.aliyuncs.com/%E5%B0%8F%E4%B9%A6%E5%8C%A0/fastdfs-5.05.tar.gz" target="_blank" rel="noopener">fastdfs-5.05.tar.gz</a></li><li><a href="https://angela-di.oss-cn-shenzhen.aliyuncs.com/%E5%B0%8F%E4%B9%A6%E5%8C%A0/fastdfs-nginx-module_v1.16.tar.gz" target="_blank" rel="noopener">fastdfs-nginx-module_v1.16.tar.gz</a></li><li><a href="https://angela-di.oss-cn-shenzhen.aliyuncs.com/%E5%B0%8F%E4%B9%A6%E5%8C%A0/libfastcommon-1.0.7.tar.gz" target="_blank" rel="noopener">libfastcommon-1.0.7.tar.gz</a></li><li><a href="https://angela-di.oss-cn-shenzhen.aliyuncs.com/%E5%B0%8F%E4%B9%A6%E5%8C%A0/nginx-1.6.3.tar.gz" target="_blank" rel="noopener">nginx-1.6.3.tar.gz</a></li></ul><h2 id="安装-tracker服务"><a href="#安装-tracker服务" class="headerlink" title="安装 tracker服务"></a>安装 tracker服务</h2><h3 id="安装环境"><a href="#安装环境" class="headerlink" title="安装环境"></a>安装环境</h3><h4 id="安装libevent"><a href="#安装libevent" class="headerlink" title="安装libevent"></a>安装libevent</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum -y install libevent</span><br></pre></td></tr></table></figure><h4 id="安装libfastcommon"><a href="#安装libfastcommon" class="headerlink" title="安装libfastcommon"></a>安装libfastcommon</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar -zxvf libfastcommon-1.0.7.tar.gz  //解压</span><br><span class="line">./make.sh  //编译</span><br><span class="line">./make.sh install  //安装,会安装到/usr/lib64目录</span><br><span class="line">cp /usr/lib64/libfastcommon.so /usr/lib</span><br></pre></td></tr></table></figure><h3 id="安装fastdfs"><a href="#安装fastdfs" class="headerlink" title="安装fastdfs"></a>安装fastdfs</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar -zxvf fastdfs-5.05.tar.gz</span><br><span class="line">./make.sh</span><br><span class="line">./make.sh install //会安装命令到/usr/bin目录以及配置文件到/etc/fdfs/</span><br></pre></td></tr></table></figure><h3 id="配置tracker"><a href="#配置tracker" class="headerlink" title="配置tracker"></a>配置tracker</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cp /home/tar/fastDFS/fastdfs-5.05/conf/* /etc/fdfs/</span><br><span class="line">vim /etc/fdfs/tracker.conf</span><br><span class="line">base_path=/fastdfs/tracker //修改日志保存路径</span><br><span class="line">mkdir /fastdfs/tracker -p  //递归创建</span><br><span class="line">mkdir /fastdfs/storage -p</span><br><span class="line">mkdir /fastdfs/client -p</span><br></pre></td></tr></table></figure><h3 id="启动tracker"><a href="#启动tracker" class="headerlink" title="启动tracker"></a>启动tracker</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/bin</span><br><span class="line">fdfs_trackerd /etc/fdfs/tracker.conf  //启动</span><br><span class="line">fdfs_trackerd /etc/fdfs/tracker.conf restart //重启</span><br></pre></td></tr></table></figure><h2 id="安装storage服务"><a href="#安装storage服务" class="headerlink" title="安装storage服务"></a>安装storage服务</h2><h3 id="配置storage"><a href="#配置storage" class="headerlink" title="配置storage"></a>配置storage</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/fdfs/storage.conf</span><br><span class="line">base_path=/fastdfs/storage</span><br><span class="line">group_name=jay  //组织名,文件前缀</span><br><span class="line">store_path0=/fastdfs/storage  //文件实际存储路径</span><br><span class="line">tracker_server=119.3.142.206:22122  //你自己的服务器地址</span><br></pre></td></tr></table></figure><h3 id="启动storage"><a href="#启动storage" class="headerlink" title="启动storage"></a>启动storage</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/usr/bin fdfs_storaged /etc/fdfs/storage.conf  //启动</span><br><span class="line">/usr/bin fdfs_storaged /etc/fdfs/storage.conf restart //重启</span><br></pre></td></tr></table></figure><h2 id="配置client测试上传"><a href="#配置client测试上传" class="headerlink" title="配置client测试上传"></a>配置client测试上传</h2><h3 id="配置client"><a href="#配置client" class="headerlink" title="配置client"></a>配置client</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/fdfs/client.conf</span><br><span class="line">base_path=/fastdfs/client</span><br><span class="line">tracker_server=119.3.142.206:22122</span><br></pre></td></tr></table></figure><h3 id="测试上传"><a href="#测试上传" class="headerlink" title="测试上传"></a>测试上传</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/usr/bin fdfs_test /etc/fdfs/client.conf upload /home/1.png  //返回的地址不能直接访问,需配置web服务器nginx</span><br><span class="line"><span class="built_in">cd</span> /fastdfs/storage/data/00/00  //查看上传的文件</span><br></pre></td></tr></table></figure><h2 id="nginx安装与fastdfs配置"><a href="#nginx安装与fastdfs配置" class="headerlink" title="nginx安装与fastdfs配置"></a>nginx安装与fastdfs配置</h2><h3 id="配置fastdfs和nginx的整合包"><a href="#配置fastdfs和nginx的整合包" class="headerlink" title="配置fastdfs和nginx的整合包"></a>配置fastdfs和nginx的整合包</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar -zxvf fastdfs-nginx-module_v1.16.tar.gz</span><br><span class="line">vim /home/tar/fastDFS/fastdfs-nginx-module/src/config</span><br><span class="line"><span class="comment">#修改三处路径</span></span><br><span class="line">/usr/include/fastdfs</span><br><span class="line">/usr/include/fastcommon/</span><br><span class="line">/usr/lib -lfastcommon -lfdfsclient</span><br></pre></td></tr></table></figure><h3 id="安装nginx"><a href="#安装nginx" class="headerlink" title="安装nginx"></a>安装nginx</h3><h4 id="安装基本环境"><a href="#安装基本环境" class="headerlink" title="安装基本环境"></a>安装基本环境</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install gcc-c++</span><br><span class="line">yum install pcre pcre-devel  //包含一些正则表达式,nginx通过此库兼容解析nginx正则表达式</span><br><span class="line">yum install zlib zlib-dev</span><br><span class="line">yum install openssl openssl-devel</span><br></pre></td></tr></table></figure><h4 id="配置nginx"><a href="#配置nginx" class="headerlink" title="配置nginx"></a>配置nginx</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar -zxvf nginx-1.6.3.tar.gz</span><br><span class="line"><span class="built_in">cd</span> nginx-1.6.3</span><br><span class="line"><span class="comment">#添加fdfs模块</span></span><br><span class="line">./configure \</span><br><span class="line">--prefix=/usr/<span class="built_in">local</span>/nginx \</span><br><span class="line">--pid-path=/var/run/nginx/nginx.pid \</span><br><span class="line">--lock-path=/var/lock/nginx.lock \</span><br><span class="line">--error-log-path=/var/<span class="built_in">log</span>/nginx/error.log \</span><br><span class="line">--http-log-path=/var/<span class="built_in">log</span>/nginx/access.log \</span><br><span class="line">--with-http_gzip_static_module \</span><br><span class="line">--http-client-body-temp-path=/var/temp/nginx/client \</span><br><span class="line">--http-proxy-temp-path=/var/temp/nginx/proxy \</span><br><span class="line">--http-fastcgi-temp-path=/var/temp/nginx/fastcgi \</span><br><span class="line">--http-uwsgi-temp-path=/var/temp/nginx/uwsgi \</span><br><span class="line">--http-scgi-temp-path=/var/temp/nginx/scgi \</span><br><span class="line">--add-module=/home/tar/fastDFS/fastdfs-nginx-module/src</span><br><span class="line"></span><br><span class="line">make //编译nginx</span><br><span class="line">make install //安装到/usr/<span class="built_in">local</span>目录下</span><br></pre></td></tr></table></figure><h4 id="配置桥梁模块"><a href="#配置桥梁模块" class="headerlink" title="配置桥梁模块"></a>配置桥梁模块</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cp /home/tar/fastDFS/fastdfs-nginx-module/src/mod_fastdfs.conf /etc/fdfs/</span><br><span class="line">vim mod_fastdfs.conf</span><br><span class="line">base_path=/fastdfs/tmp</span><br><span class="line">tracker_server=119.3.142.206:22122</span><br><span class="line">group_name=jay</span><br><span class="line">url_have_group_name=<span class="literal">true</span></span><br><span class="line">store_path0=/fastdfs/storage</span><br></pre></td></tr></table></figure><h4 id="配置nginx-1"><a href="#配置nginx-1" class="headerlink" title="配置nginx"></a>配置nginx</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /usr/<span class="built_in">local</span>/nginx/conf/nginx.conf</span><br><span class="line"><span class="comment">#增加一个server,保存退出</span></span><br><span class="line">server&#123;</span><br><span class="line">listen 88;</span><br><span class="line">server_name 119.3.142.206;</span><br><span class="line">location /jay/M00&#123;</span><br><span class="line">ngx_fastdfs_module;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/nginx/sbin</span><br><span class="line">./nginx -t //检查nginx是否配置ok</span><br><span class="line">./nginx  //启动nginx</span><br><span class="line">./nginx -s reload //重启</span><br><span class="line"></span><br><span class="line"><span class="comment">#打开chrome访问ip:80,如果无法访问需关闭防火墙，云服务器配置安全组放通端口</span></span><br><span class="line">/etc/init.d/iptables status  //查看防火墙状态</span><br><span class="line">/etc/init.d/iptables stop</span><br><span class="line"><span class="comment">#访问图片</span></span><br><span class="line">119.3.142.206:88/jay/M00/00/00/1.jpg</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Nginx </category>
          
          <category> Fastdfs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nginx </tag>
            
            <tag> Fastdfs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring整合Zookeeper实现分布式系统背景音乐自动下载</title>
      <link href="/2019/10/07/Spring%E6%95%B4%E5%90%88Zookeeper%E5%AE%9E%E7%8E%B0%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F%E8%83%8C%E6%99%AF%E9%9F%B3%E4%B9%90%E8%87%AA%E5%8A%A8%E4%B8%8B%E8%BD%BD/"/>
      <url>/2019/10/07/Spring%E6%95%B4%E5%90%88Zookeeper%E5%AE%9E%E7%8E%B0%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F%E8%83%8C%E6%99%AF%E9%9F%B3%E4%B9%90%E8%87%AA%E5%8A%A8%E4%B8%8B%E8%BD%BD/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><hr><h2 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h2><p><img alt="业务图" data-src="https://angela-di.oss-cn-shenzhen.aliyuncs.com/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1570383318482.png" class="lozad"></p><h3 id="组件介绍"><a href="#组件介绍" class="headerlink" title="组件介绍"></a>组件介绍</h3><ul><li>ZooKeeper是一个分布式的，开放源码的分布式应用程序协调服务，是Google的Chubby一个开源的实现，是Hadoop和Hbase的重要组件。它是一个为分布式应用提供一致性服务的软件，提供的功能包括：配置维护、域名服务、分布式同步、组服务等，提供Java和C的接口。</li><li>Curator是Netflix公司开源的一个Zookeeper客户端，后捐献给Apache，Curator框架在zookeeper原生API接口上进行了包装，解决了很多ZooKeeper客户端非常底层的细节开发。提供ZooKeeper各种应用场景(recipe， 比如：分布式锁服务、集群领导选举、共享计数器、缓存机制、分布式队列等)的抽象封装，实现了Fluent风格的API接口,是最好用，最流行的zookeeper的客户端。</li></ul><h2 id="一丶-Maven构建"><a href="#一丶-Maven构建" class="headerlink" title="一丶 Maven构建"></a>一丶 Maven构建</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 引入zookeeper --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.curator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>curator-framework<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.zookeeper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zookeeper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.curator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>curator-recipes<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="二丶Spring整合Zookeeper，使用xml配置"><a href="#二丶Spring整合Zookeeper，使用xml配置" class="headerlink" title="二丶Spring整合Zookeeper，使用xml配置"></a>二丶Spring整合Zookeeper，使用xml配置</h2><p>编写applicationContext-zookeeper.xml,zookeeper放入spring容器，项目启动加载的时候就建立和zk的连接</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 创建重连策略 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"retryPolicy"</span> <span class="attr">class</span>=<span class="string">"org.apache.curator.retry.ExponentialBackoffRetry"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 每次重试连接的等待时间 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">"0"</span> <span class="attr">value</span>=<span class="string">"1000"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 设置的重连的次数 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">"1"</span> <span class="attr">value</span>=<span class="string">"5"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 创建zookeeper客户端 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"client"</span> <span class="attr">class</span>=<span class="string">"org.apache.curator.framework.CuratorFrameworkFactory"</span> </span></span><br><span class="line"><span class="tag"><span class="attr">factory-method</span>=<span class="string">"newClient"</span> <span class="attr">init-method</span>=<span class="string">"start"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">"0"</span> <span class="attr">value</span>=<span class="string">"127.0.0.1:2181"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;constructor-arg index="0" value="192.168.1.210:2181"&gt;&lt;/constructor-arg&gt; --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">"1"</span> <span class="attr">value</span>=<span class="string">"10000"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">"2"</span> <span class="attr">value</span>=<span class="string">"10000"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">"3"</span> <span class="attr">ref</span>=<span class="string">"retryPolicy"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 客户端配置 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- init-method="init" 不使用zk的话，仅仅只是测试为了方便可以把这个方法暂时拿掉 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"ZKCurator"</span> <span class="attr">class</span>=<span class="string">"com.imooc.web.util.ZKCurator"</span> <span class="attr">init-method</span>=<span class="string">"init"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">"0"</span> <span class="attr">ref</span>=<span class="string">"client"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="三丶后台管理系统-添加删除bgm-zk客户端实现"><a href="#三丶后台管理系统-添加删除bgm-zk客户端实现" class="headerlink" title="三丶后台管理系统 添加删除bgm zk客户端实现"></a>三丶后台管理系统 添加删除bgm zk客户端实现</h2><p>添加删除bgm向zk-server创建子节点</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span> </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addBgm</span><span class="params">(Bgm bgm)</span> </span>&#123; </span><br><span class="line">  String bgmId = sid.nextShort();</span><br><span class="line">  bgm.setId(bgmId); bgmMapper.insert(bgm);</span><br><span class="line">  </span><br><span class="line">  Map&lt;String, String&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;(); </span><br><span class="line">  map.put(<span class="string">"operType"</span>,BGMOperatorTypeEnum.ADD.type); </span><br><span class="line">  map.put(<span class="string">"path"</span>, bgm.getPath());</span><br><span class="line">  </span><br><span class="line">  zkCurator.sendBgmOperator(bgmId, JsonUtils.objectToJson(map));</span><br><span class="line"> </span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>Spring容器初始化就创建了ZkCurator Bean</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZKCurator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// zk客户端</span></span><br><span class="line"><span class="keyword">private</span> CuratorFramework client = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">final</span> <span class="keyword">static</span> Logger log = LoggerFactory.getLogger(ZKCurator.class);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ZKCurator</span><span class="params">(CuratorFramework client)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.client = client;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">client = client.usingNamespace(<span class="string">"admin"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">// 判断在admin命名空间下是否有bgm节点  /admin/bmg</span></span><br><span class="line"><span class="keyword">if</span> (client.checkExists().forPath(<span class="string">"/bgm"</span>) == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 对于zk来讲，有两种类型的节点:</span></span><br><span class="line"><span class="comment"> * 持久节点: 当你创建一个节点的时候，这个节点就永远存在，除非你手动删除</span></span><br><span class="line"><span class="comment"> * 临时节点: 你创建一个节点之后，会话断开，会自动删除，当然也可以手动删除</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">client.create().creatingParentsIfNeeded()</span><br><span class="line">.withMode(CreateMode.PERSISTENT)<span class="comment">// 节点类型：持久节点</span></span><br><span class="line">.withACL(Ids.OPEN_ACL_UNSAFE)<span class="comment">// acl：匿名权限</span></span><br><span class="line">.forPath(<span class="string">"/bgm"</span>);</span><br><span class="line">log.info(<span class="string">"zookeeper初始化成功..."</span>);</span><br><span class="line"></span><br><span class="line">log.info(<span class="string">"zookeeper服务器状态：&#123;&#125;"</span>, client.isStarted());</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">log.error(<span class="string">"zookeeper客户端连接、初始化错误..."</span>);</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 增加或者删除bgm，向zk-server创建子节点，供小程序后端监听</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendBgmOperator</span><span class="params">(String bgmId, String operObj)</span> </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">client.create().creatingParentsIfNeeded()</span><br><span class="line">.withMode(CreateMode.PERSISTENT)<span class="comment">// 节点类型：持久节点</span></span><br><span class="line">.withACL(Ids.OPEN_ACL_UNSAFE)<span class="comment">// acl：匿名权限</span></span><br><span class="line">.forPath(<span class="string">"/bgm/"</span> + bgmId, operObj.getBytes());</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123; </span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="四丶Springboot整合Zookeeper，使用Java类配置"><a href="#四丶Springboot整合Zookeeper，使用Java类配置" class="headerlink" title="四丶Springboot整合Zookeeper，使用Java类配置"></a>四丶Springboot整合Zookeeper，使用Java类配置</h2><p>@Configuration启动容器+@Bean注册Bean</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebMvcConfig</span> <span class="keyword">extends</span> <span class="title">WebMvcConfigurerAdapter</span> </span>&#123;</span><br><span class="line"> <span class="meta">@Bean</span>(initMethod=<span class="string">"init"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ZKCuratorClient <span class="title">zkCuratorClient</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ZKCuratorClient();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注册bean时调用init方法创建启动客户端监听节点</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (client != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 重试策略</span></span><br><span class="line">RetryPolicy retryPolicy = <span class="keyword">new</span> ExponentialBackoffRetry(<span class="number">1000</span>, <span class="number">5</span>);</span><br><span class="line"><span class="comment">// 创建zk客户端</span></span><br><span class="line">client = CuratorFrameworkFactory.builder().connectString(resourceConfig.getZookeeperServer())</span><br><span class="line">.sessionTimeoutMs(<span class="number">10000</span>).retryPolicy(retryPolicy).namespace(<span class="string">"admin"</span>).build();</span><br><span class="line"><span class="comment">// 启动客户端</span></span><br><span class="line">client.start();</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">//String testNodeData = new String(client.getData().forPath("/bgm/18052674D26HH3X4"));</span></span><br><span class="line"><span class="comment">//log.info("测试的节点数据为： &#123;&#125;", testNodeData);</span></span><br><span class="line">addChildWatch(<span class="string">"/bgm"</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="五丶小程序端-监听下载删除bgm-zk客户端实现"><a href="#五丶小程序端-监听下载删除bgm-zk客户端实现" class="headerlink" title="五丶小程序端 监听下载删除bgm zk客户端实现"></a>五丶小程序端 监听下载删除bgm zk客户端实现</h2><p>监听zk-server增加的节点，获取节点里的类型和url数据，根据类型的不同拼接bgm url执行下载或删除bgm，最后删除节点</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addChildWatch</span><span class="params">(String nodePath)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> PathChildrenCache cache = <span class="keyword">new</span> PathChildrenCache(client, nodePath, <span class="keyword">true</span>);</span><br><span class="line">cache.start();</span><br><span class="line">cache.getListenable().addListener(<span class="keyword">new</span> PathChildrenCacheListener() &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">childEvent</span><span class="params">(CuratorFramework client, PathChildrenCacheEvent event)</span> </span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (event.getType().equals(PathChildrenCacheEvent.Type.CHILD_ADDED)) &#123;</span><br><span class="line">log.info(<span class="string">"监听到事件 CHILD_ADDED"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. 从数据库查询bgm对象，获取路径path</span></span><br><span class="line"><span class="comment">// 1. updated 修改为从zk获取</span></span><br><span class="line">String path = event.getData().getPath();</span><br><span class="line">String operatorObjStr = <span class="keyword">new</span> String(event.getData().getData(), <span class="string">"UTF-8"</span>);</span><br><span class="line">Map&lt;String, String&gt; map = JsonUtils.jsonToPojo(operatorObjStr, Map.class);</span><br><span class="line">String operatorType = map.get(<span class="string">"operType"</span>);</span><br><span class="line">String songPath = map.get(<span class="string">"path"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//String arr[] = path.split("/");</span></span><br><span class="line"><span class="comment">//String bgmId = arr[arr.length - 1];</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Bgm bgm = bgmService.queryBgmById(bgmId);</span></span><br><span class="line"><span class="comment">//if (bgm == null) &#123;</span></span><br><span class="line"><span class="comment">//return;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1.1 bgm所在的相对路径</span></span><br><span class="line"><span class="comment">//String songPath = bgm.getPath();</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 定义保存到本地的bgm路径</span></span><br><span class="line"><span class="comment">//String filePath = "C:\\imooc_videos_dev" + songPath;</span></span><br><span class="line">String filePath = resourceConfig.getFileSpace() + songPath;</span><br><span class="line">log.info(<span class="string">"1. ============ filePath:&#123;&#125;"</span>, filePath);</span><br><span class="line"><span class="comment">// 3. 定义下载的路径（播放url）</span></span><br><span class="line"><span class="comment">//String arrPath[] = songPath.split("/");// linux</span></span><br><span class="line">String arrPath[] = songPath.split(<span class="string">"\\\\"</span>);<span class="comment">// windows</span></span><br><span class="line">String finalPath = <span class="string">""</span>;</span><br><span class="line"><span class="comment">// 3.1 处理url的斜杠以及编码</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arrPath.length ; i ++) &#123;</span><br><span class="line"><span class="keyword">if</span> (StringUtils.isNotBlank(arrPath[i])) &#123;</span><br><span class="line">finalPath += <span class="string">"/"</span>;</span><br><span class="line">finalPath += URLEncoder.encode(arrPath[i], <span class="string">"UTF-8"</span>) ;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">finalPath=finalPath.replaceAll(<span class="string">"\\+"</span>,<span class="string">"%20"</span>);</span><br><span class="line">finalPath=finalPath.replaceAll(<span class="string">"%5C"</span>,<span class="string">"/"</span>);</span><br><span class="line">log.info(<span class="string">"2. ============ finalPath:&#123;&#125;"</span>, finalPath);</span><br><span class="line"></span><br><span class="line"><span class="comment">//String bgmUrl = "http://192.168.1.2:8080/mvc" + finalPath;</span></span><br><span class="line">String bgmUrl = resourceConfig.getBgmServer() + finalPath;</span><br><span class="line">log.info(<span class="string">"3. ============ bgmUrl:&#123;&#125;"</span>, bgmUrl);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (operatorType.equals(BGMOperatorTypeEnum.ADD.type)) &#123;</span><br><span class="line"><span class="comment">// 下载bgm到spingboot服务器</span></span><br><span class="line">URL url = <span class="keyword">new</span> URL(bgmUrl);</span><br><span class="line">File file = <span class="keyword">new</span> File(filePath);</span><br><span class="line">FileUtils.copyURLToFile(url, file);</span><br><span class="line">client.delete().forPath(path);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (operatorType.equals(BGMOperatorTypeEnum.DELETE.type)) &#123;</span><br><span class="line">File file = <span class="keyword">new</span> File(filePath);</span><br><span class="line">FileUtils.forceDelete(file);</span><br><span class="line">client.delete().forPath(path);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Springboot </category>
          
          <category> Zookeeper </category>
          
          <category> 小程序 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> Springboot </tag>
            
            <tag> Zookeeper </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
